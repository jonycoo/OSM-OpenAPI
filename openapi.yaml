openapi: 3.0.2
servers:
  - url: https://master.apis.dev.openstreetmap.org
    description: Development
  - url: https://api.openstreetmap.org
    description: Production
info:
  description: >-
    This is the OSM Edit Api written as a OAS3 YAML file

  version: 0.0.1
  title: OSM-OpenAPI
tags:
  - name: Miscellaneous
    description: Miscellaneous informative
  - name: Changesets
    description: set of Changes
  - name: Changeset discussion
    description: Discussions to a Changeset
  - name: Elements
    description: Nodes, Ways, Relations
  - name: GPS traces
    description: Operations on GPS-Traces
  - name: User data
    description: Permissions and data
  - name: Map notes
    description: Notes on Places
paths:
  /api/versions:
    get:
      tags:
        - Miscellaneous
      summary: Available API versions
      operationId: versions
      responses:
        '200':
          description: Successful operation
          content:
            text/xml:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Osm'
                  - type: object
                    properties:
                      api:
                        type: array
                        xml:
                          wrapped: true
                        items:
                          type: string
                          example: '0.6'
                          xml:
                            name: version
              examples:
                version0.6:
                  value: "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<osm generator=\"OpenStreetMap server\" copyright=\"OpenStreetMap and contributors\" attribution=\"https://www.openstreetmap.org/copyright\" license=\"https://opendatacommons.org/licenses/odbl/1-0/\">\n        <api>\n\t\t<version>0.6</version>\n\t</api>\n</osm>\n"

  /api/capabilities:
    get:
      tags:
        - Miscellaneous
      summary: Available API versions
      operationId: capability
      responses:
        '200':
          description: Successful operation
          content:
            text/xml:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Osm'
                  - type: object
                    properties:
                      api:
                        properties:
                          version:
                            description: >-
                              Version minimum and maximum are the API call
                              versions that the server will accept
                            properties:
                              minimum:
                                type: string
                                example: '0.6'
                                xml:
                                  attribute: true
                              maximum:
                                type: string
                                example: '0.6'
                                xml:
                                  attribute: true
                          area:
                            description: >-
                              Area maximum is the maximum area in square degrees
                              that can be queried by API calls.
                            properties:
                              maximum:
                                type: string
                                example: '0.25'
                                xml:
                                  attribute: true
                          note_area:
                            properties:
                              maximum:
                                type: string
                                example: '25'
                                xml:
                                  attribute: true
                          tracepoints:
                            description: >-
                              Tracepoints per_page is the maximum number of
                              points in a single GPS trace. (Possibly incorrect)
                            properties:
                              per_page:
                                type: string
                                example: '5000'
                                xml:
                                  attribute: true
                          waynodes:
                            description: >-
                              Waypoints maximum is the maximum number of nodes
                              that a way may contain.
                            properties:
                              maximum:
                                type: string
                                example: '2000'
                                xml:
                                  attribute: true
                          changesets:
                            description: >-
                              Changesets maximum is the maximum number of
                              combined nodes, ways and relations that can be
                              contained in a changeset.
                            properties:
                              maximum_elements:
                                type: string
                                example: '10000'
                                xml:
                                  attribute: true
                          timeout:
                            properties:
                              seconds:
                                type: string
                                example: '300'
                                xml:
                                  attribute: true
                          status:
                            description: >-
                              The status element returns either online, readonly
                              or offline for each of the database, API and GPX
                              API. The database field is informational, and the
                              API/GPX-API fields indicate whether a client
                              should expect read and write requests to work
                              (online), only read requests to work (readonly) or
                              no requests to work (offline).
                            properties:
                              database:
                                type: string
                                enum:
                                  - online
                                  - readonly
                                  - offline
                                xml:
                                  attribute: true
                              api:
                                type: string
                                enum:
                                  - online
                                  - readonly
                                  - offline
                                xml:
                                  attribute: true
                              gpx:
                                type: string
                                enum:
                                  - online
                                  - readonly
                                  - offline
                                xml:
                                  attribute: true
                      policy:
                        properties:
                          immagery:
                            description: >-
                              Imagery blacklist lists all aerial and map
                              sources, which are not permitted for OSM usage due
                              to copyright. Editors must not show these
                              resources as background layer.
                            properties:
                              imagery:
                                type: array
                                items:
                                  properties:
                                    regex:
                                      type: string
                                      example: >-
                                        .*\.google(apis)?\..*/(vt|kh)[\?/].*([xyz]=.*){3}.*
                                      xml:
                                        attribute: true
                                  xml:
                                    wrapped: true
                                    name: blacklist
              examples:
                dataLimits:
                  value: >
                    <?xml version="1.0" encoding="UTF-8"?>
                      <osm version="0.6" generator="OpenStreetMap server" copyright="OpenStreetMap and contributors" attribution="https://www.openstreetmap.org/copyright" license="https://opendatacommons.org/licenses/odbl/1-0/">
                        <api>
                          <version minimum="0.6" maximum="0.6"/>
                          <area maximum="0.25"/>
                          <note_area maximum="25"/>
                          <tracepoints per_page="5000"/>
                          <waynodes maximum="2000"/>
                          <changesets maximum_elements="10000"/>
                          <timeout seconds="300"/>
                          <status database="online" api="online" gpx="online"/>
                        </api>
                        <policy>
                          <imagery>
                            <blacklist regex=".*\.google(apis)?\..*/(vt|kh)[\?/].*([xyz]=.*){3}.*"/>
                            <blacklist regex="http://xdworld\.vworld\.kr:8080/.*"/>
                            <blacklist regex=".*\.here\.com[/:].*"/>
                          </imagery>
                        </policy>
                      </osm>

  /api/0.6/map:
    get:
      tags:
        - Miscellaneous
      summary: Available API versions
      operationId: map_data
      parameters:
        - name: bbox
          in: query
          description: >-
            <code>GET /api/0.6/map?bbox=left,bottom,right,top</code><br>
            <tt><b>left</b></tt> is the longitude of the left (westernmost) side
            of the bounding box.<br> <tt><b>bottom</b></tt> is the latitude of
            the bottom (southernmost) side of the bounding box.<br>
            <tt><b>right</b></tt> is the longitude of the right (easternmost)
            side of the bounding box.<br> <tt><b>top</b></tt> is the latitude of
            the top (northernmost) side of the bounding box.
          required: true
          schema:
            type: array
            minItems: 4
            maxItems: 4
            items:
              type: number
            example: 1.4,2.7,3.9,5.6
          explode: false
      responses:
        '200':
          description: Successful operation
          content:
            text/xml:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Osm'
                  - type: object
        '400':
          description: >-
            When any of the node/way/relation limits are exceeded, in particular
            if the call would return more than 50'000 nodes.
          links:
            dataLimit:
              operationId: capability
              description: Data Return limits as described

        '509':
          description: 'Error: You have downloaded too much data. Please try again later. see <a href="https://wiki.openstreetmap.org/wiki/Developer_FAQ#I.27ve_been_blocked_from_the_API_for_downloading_too_much._Now_what.3F">Developer FAQ</a>'

  /api/0.6/permissions:
    get:
      tags:
        - Miscellaneous
      summary: current Permissions of logged in user
      description: >
        Currently the following permissions can appear in the result, corresponding directly to the ones used in the OAuth 1.0a application definition.<br>
        allow_read_prefs (read user preferences)<br>
        allow_write_prefs (modify user preferences)<br>
        allow_write_diary (create diary entries, comments and make friends)<br>
        allow_write_api (modify the map)<br>
        allow_read_gpx (read private GPS traces)<br>
        allow_write_gpx (upload GPS traces)<br>
        allow_write_notes (modify notes)
      operationId: permissions
      responses:
        '200':
          description: Successful operation
          content:
            text/xml:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Osm'
                  - type: object
                    properties:
                      permissions:
                        type: array
                        items:
                          properties:
                            name:
                              type: string
                              enum:
                                - allow_read_prefs
                                - allow_write_prefs
                                - allow_write_diary
                                - allow_write_api
                                - allow_read_gpx
                                - allow_write_gpx
                                - allow_write_notes
                              example: allow_read_prefs
                              xml:
                                name: name
                                attribute: true
                          xml:
                            name: permission
                        xml:
                          wrapped: true
              examples:
                permissions:
                  value: >
                    <?xml version="1.0" encoding="UTF-8"?>
                    <osm version="0.6" generator="OpenStreetMap server">
                      <permissions>
                        <permission name="allow_read_prefs"/>
                        ...
                        <permission name="allow_read_gpx"/>
                        <permission name="allow_write_gpx"/>
                      </permissions>
                    </osm>
      security:
        - oAuth2:
          - write_api
        - basicAuth: []

  /api/0.6/changeset/create:
    put:
      tags:
        - Changesets
      summary: create a new changeset
      requestBody:
        content:
          text/xml:
            schema:
              allOf:
                - $ref: '#/components/schemas/Osm'
                - type: object
                  properties:
                    changeset:
                      allOf:
                        - $ref: '#/components/schemas/Changeset'
                        - type: object
      responses:
        '200':
          description: Successful operation
          content:
            text/plain:
              schema:
                type: integer
                example: 11001100
        '400':
          description: error parsing the xml
        '405':
          description: If the request is not a HTTP PUT request
      security:
        - oAuth2:
          - write_api
        - basicAuth: []

  /api/0.6/changeset/{id}:
    get:
      tags:
        - Changesets
      summary: get specific changeset
      operationId: changesetById
      parameters:
        - name: id
          in: path
          description: id of reqested changeset
          required: true
          schema:
            type: integer
            format: int64
        - name: include_discussion
          in: query
          description: include changeset discussion?
          schema:
            type: boolean
            default: false
      responses:
        '200':
          description: Successful operation
          content:
            text/xml:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Osm'
                  - type: object
                    properties:
                      changeset:
                        $ref: '#/components/schemas/Changeset'
        '404':
          description: When no changeset with the given id could be found.
    put:
      tags:
        - Changesets
      summary: Update Changeset
      operationId: updateChangeset
      parameters:
        - name: id
          in: path
          description: 'update Changeset Metadata, only data in this changeset is stored. <strong>Unchanged tags have to be repeated in order to not be deleted.</strong>'
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        content:
          text/xml:
            schema:
              allOf:
                - $ref: '#/components/schemas/Osm'
                - type: object
                  properties:
                    changeset:
                      allOf:
                        - $ref: '#/components/schemas/Changeset'
                        - type: object
      responses:
        '200':
          description: Successful operation
          content:
            text/xml:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Osm'
                  - type: object
                    properties:
                      changeset:
                        $ref: '#/components/schemas/Changeset'
        '400':
          description: When there are errors parsing the XML
        '404':
          description: When no changeset with the given id could be found
        '405':
          description: If the request is not a HTTP PUT request
        '409':
          description: >
            If the changeset in question has already been closed.
            If, while uploading, the max. size of the changeset is exceeded.
            Or if the user trying to update the changeset is not the same as the one that created it
            Or if the diff contains elements with changeset IDs which don't match the changeset ID that the diff was uploaded to
            Or any of the error messages that could occur as a result of a create, update or delete operation for one of the elements
          content:
            text/xml:
              schema:
                description: A message with the format "The changeset #id was closed at #closed_at."
      security:
        - oAuth2:
          - write_api
        - basicAuth: []

  /api/0.6/changeset/{id}/close:
    put:
      tags:
        - Changesets
      summary: close a changeset
      operationId: closeChangeset
      parameters:
        - name: id
          in: path
          description: 'The id of the changeset to close. The user issuing this API call has to be the same that created the changeset.'
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Successful operation
        '404':
          description: When no changeset with the given id could be found
        '405':
          description: If the request is not a HTTP PUT request
        '409':
          description: >
            If the changeset in question has already been closed (either by the user itself or as a result of the auto-closing feature). A message with the format "The changeset #id was closed at #closed_at." is returned
            Or if the user trying to update the changeset is not the same as the one that created it
      security:
        - oAuth2:
          - write_api
        - basicAuth: []

  /api/0.6/changeset/{id}/download:
    get:
      tags:
        - Changesets
      summary: get a OsmChange Document of a changeset
      operationId: downloadChangeset
      parameters:
        - name: id
          in: path
          description: The id of the changeset for which the OsmChange is requested.
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: 'Successful operation <br> more documentation to OsmChange can be found <a href="https://wiki.openstreetmap.org/wiki/OsmChange">here</a>'
          content:
            text/xml:
              example: > 
                <osmChange version="0.6" generator="acme osm editor">
                    <modify>
                        <node id="1234" changeset="42" version="2" lat="12.1234567" lon="-8.7654321">
                            <tag k="amenity" v="school"/>
                        </node>
                    </modify>
                </osmChange>
        '404':
          description: When no changeset with the given id could be found

  /api/0.6/changeset/{id}/upload:
    post:
      tags:
        - Changesets
      summary: Upload Changes as OsmChange Document
      operationId: uploadChangeset
      parameters:
        - name: id
          in: path
          description: The id of the changeset for which the OsmChange is requested.
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        content:
          text/xml:
            schema:
              type: object
              description: an <a href="https://wiki.openstreetmap.org/wiki/OsmChange">OsmChange</a> Document
              example: >
                <osmChange version="0.6" generator="acme osm editor">
                    <modify>
                        <node id="1234" changeset="42" version="2" lat="12.1234567" lon="-8.7654321">
                            <tag k="amenity" v="school"/>
                        </node>
                    </modify>
                </osmChange>
      responses:
        '200':
          description: Successful operation
          content:
            text/xml:
              schema:
                description: can have any node/way/relation with any combination of old_id/new_id/new_version
                example: >
                  <diffResult generator="OpenStreetMap Server" version="0.6">
                    <node|way|relation old_id="#" new_id="#" new_version="#"/>
                    ...
                  </diffResult>
      security:
        - oAuth2:
          - write_api
        - basicAuth: []

  /api/0.6/changeset/{id}/expand_bbox:
    post:
      tags:
        - Changesets
      summary: expands Changeset bbox to fit all changes
      description: use operation <tt>PUT on path /api/0.6/{elementType}/{id}</tt>
      # operationId: exandBbox
      deprecated: true
      parameters:
        - name: id
          in: path
          description: The id of the changeset for which the OsmChange is requested.
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '404':
          description: endpoint is gone

  /api/0.6/changesets:
    get:
      tags:
        - Changesets
      summary: Query/Search changesets
      description: Query for Changesets meeting certain critiria
      operationId: queryChangsets
      parameters:
        - name: bbox
          in: query
          description: >-
            <code>GET /api/0.6/map?bbox=left,bottom,right,top</code><br>
            <tt><b>left</b></tt> is the longitude of the left (westernmost) side
            of the bounding box.<br> <tt><b>bottom</b></tt> is the latitude of
            the bottom (southernmost) side of the bounding box.<br>
            <tt><b>right</b></tt> is the longitude of the right (easternmost)
            side of the bounding box.<br> <tt><b>top</b></tt> is the latitude of
            the top (northernmost) side of the bounding box.
          schema:
            type: array
            minItems: 4
            maxItems: 4
            items:
              type: number
            example: '1.4,2.7,3.9,5.6'
          explode: false
        - name: time
          in: query
          description: 'Find changesets that were closed after T1 and created before T2. In other words, any changesets that were open at some time during the given time range T1 to T2.'
          schema:
            type: array
            minItems: 1
            maxItems: 2
            items:
              type: string
              format: date-time
          explode: false
        - name: changesets
          in: query
          description: Finds changesets with the specified ids
          schema:
            type: array
            items:
              type: integer
              format: int64
          explode: false
        - name: open
          in: query
          description: 'Only finds changesets that are still open but excludes changesets that are closed or have reached the element limit for a changeset'
          schema:
            type: boolean
        - name: closed
          in: query
          description: 'Only finds changesets that are closed or have reached the element limit'
          schema:
            type: boolean
        - name: display_name # TODO only if not uid
          in: query
          description: username. Either username <strong>OR</strong> uid can be provided.
          schema:
            type: string
        - name: user # TODO only if not user
          in: query
          description: user id. Either username <strong>OR</strong> uid can be provided.
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Successful operation
          content:
            text/xml:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Osm'
                  - type: array
                    items:
                      $ref: '#/components/schemas/Changeset'
        '400':
          description: 'On misformed parameters. In particular, trying to provide both the UID and display name as user query parameters will result in this error.'
          content:
            text/plain:
              schema:
                description: A text message explaining the error.



  /api/0.6/changeset/{id}/comment:
    post:
      tags:
        - Changeset discussion
      summary: current Permissions of logged in user
      description: posts a comment n a Changeset
      operationId: discussionComment
      parameters:
        - name: id
          in: path
          description: 'The id of the changeset.'
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                text:
                  type: string
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/xml:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Osm'
                  - type: object
                    properties:
                      changeset:
                        $ref: '#/components/schemas/Changeset'
        '400':
          description: if the text field was not present
        '409':
          description: The changeset is not closed
      security:
        - oAuth2:
          - write_api
        - basicAuth: []

  /api/0.6/changeset/{id}/subscribe:
    post:
      tags:
        - Changeset discussion
      summary: subscribe to Changeset discussion
      operationId: discussionSubscribe
      parameters:
        - name: id
          in: path
          description: 'The id of the changeset'
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                text:
                  type: string
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/xml:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Osm'
                  - type: object
                    properties:
                      changeset:
                        $ref: '#/components/schemas/Changeset'
        '409':
          description: if the user is already subscribed to this changeset
      security:
        - oAuth2:
          - write_api
        - basicAuth: []

  /api/0.6/changeset/{id}/unsubscribe:
    post:
      tags:
        - Changeset discussion
      summary: Unsubscribe from Changeset discussion
      operationId: discussionUnsubscribe
      parameters:
        - name: id
          in: path
          description: 'The id of the changeset.'
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                text:
                  type: string
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/xml:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Osm'
                  - type: object
                    properties:
                      changeset:
                        $ref: '#/components/schemas/Changeset'
        '404':
          description: if the user is not subscribed to this changeset
      security:
        - oAuth2:
          - write_api
        - basicAuth: []

  /api/0.6/{elementType}/create:
    put:
      tags:
        - Elements
      summary: creates a new Element
      operationId: createElement
      parameters:
        - name: elementType
          in: path
          description: Type of Osm core data element
          required: true
          schema:
            enum:
              - node
              - way
              - relation
      requestBody:
        content:
          application/xml:
            schema:
              oneOf:
                - $ref: '#/components/schemas/Node'
                - $ref: '#/components/schemas/Way'
                - $ref: '#/components/schemas/Relation'
      responses:
        '200':
          description: Successful operation
          content:
            text/plain:
              schema:
                description: id of created element
        '400':
          description: >
            <li>When there are errors parsing the XML. A text message explaining the error is returned.</li>
            <li>When a changeset ID is missing (unfortunately the error messages are not consistent)</li>
            <li>When a node is outside the world</li>
            <li>When there are too many nodes for a way</li>

        '405':
          description: <li>If the request is not a HTTP PUT request</li
        '409':
          description: >
            <li>If the changeset in question has already been closed. A message with the format
              <tt>"The changeset #id was closed at #closed_at."</tt> is returned</li>
            <li>Or if the user trying to update the changeset is not the same as the one that created it</li>
        '412':
          description: >
            <li>When a way has nodes that do not exist or are not visible (i.e. deleted): <tt>"Way #{id} requires the nodes with id in (#{missing_ids}), which either do not exist, or are not visible."</tt></li>
            <li>When a relation has elements that do not exist or are not visible: <tt>"Relation with id #{id} cannot be saved due to #{element} with id #{element.id}"</tt></li>
      security:
        - oAuth2:
          - write_api
        - basicAuth: []
  
  /api/0.6/{elementType}/{id}:
    get:
      tags:
        - Elements
      summary: Returns the XML representation of the element.
      operationId: updateElement
      parameters:
        - name: elementType
          in: path
          description: Type of Osm core data element
          required: true
          schema:
            enum:
              - node
              - way
              - relation
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Successful operation
          content:
            application/xml:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/Node'
                  - $ref: '#/components/schemas/Way'
                  - $ref: '#/components/schemas/Relation'
        '404':
          description: Element of this Type and ID could not be found.
        '410':
          description: Element of this ID has been Deleted.
      security:
        - oAuth2:
          - write_api
        - basicAuth: []
    put:
      tags:
        - Elements
      summary: update Element.
      operationId: updateElement
      parameters:
        - name: elementType
          in: path
          description: Type of Osm core data element
          required: true
          schema:
            enum:
              - node
              - way
              - relation
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        content:
          application/xml:
            schema:
              oneOf:
                - $ref: '#/components/schemas/Node'
                - $ref: '#/components/schemas/Way'
                - $ref: '#/components/schemas/Relation'
      responses:
        '200':
          description: Successful
          content:
            text/plain:
              schema:
                type: string
        '400':
          description: >
            <li>When there are errors parsing the XML. A text message explaining the error is returned. This can also happen if you forget to pass the Content-Length header.</li>
            <li>When a changeset ID is missing</li>
            <li>When a node is outside the world</li>
            <li>When there are too many nodes for a way</li>
        '404': 
          description: When no element with the given id could be found
        '409':
          description: >
            <li>When the version of the provided element does not match the current database version of the element</li>
            <li>If the changeset in question has already been closed</li>
            <li>Or if the user trying to update the changeset is not the same as the one that created it</li>
        '412':
          description: >
            <li>When a way has nodes that do not exist or are not visible (i.e. deleted): "<tt>Way #{id} requires the nodes with id in (#{missing_ids}), which either do not exist, or are not visible.</tt>"</li>
            <li>When a relation has elements that do not exist or are not visible: "<tt>Relation with id #{id} cannot be saved due to #{element} with id #{element.id}</tt>"</li>
      security:
        - oAuth2:
          - write_api
        - basicAuth: []
    delete:
      tags:
        - Elements
      summary: delete element
      operationId: deleteElement
      parameters:
        - name: elementType
          in: path
          description: Type of Osm core data element
          required: true
          schema:
            enum:
              - node
              - way
              - relation
        - name: id
          in: path
          description: 'The id of the changeset.'
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        description: an xml representation of the element to be deleted.
        content:
          application/xml:
            schema:
              oneOf:
                - $ref: '#/components/schemas/Node'
                - $ref: '#/components/schemas/Way'
                - $ref: '#/components/schemas/Relation'
      responses:
        '200':
          description: Successful
          content:
            text/plain:
              schema:
                type: string
        '400':
          description: >
            <li>When there are errors parsing the XML. A text message explaining the error is returned. This can also happen if you forget to pass the Content-Length header.</li>
            <li>When a changeset ID is missing</li>
            <li>When a node is outside the world</li>
            <li>When there are too many nodes for a way</li>
            <li>When the version of the provided element does not match the current database version of the element</li>
        '404': 
          description: When no element with the given id could be found
        '409':
          description: >
            <li>If the changeset in question has already been closed</li>
            <li>Or if the user trying to update the changeset is not the same as the one that created it</li>
        '410':
          description: Element of this ID has been Deleted.
        '412':
          description: >
            <li>When a node/way/relation is still used by a way/relation: (i.e. deleted): "<tt>Node/Way/Relation #{id} is still used by way/relation #{way.id/relation.id}</tt>"</li>
      security:
        - oAuth2:
          - write_api
        - basicAuth: []
  
  /api/0.6/{elementType}/{id}/history:
    get:
      tags:
        - Elements
      summary: returns all versions of an element.
      operationId: historyElement
      parameters:
        - name: elementType
          in: path
          description: Type of Osm core data element
          required: true
          schema:
            enum:
              - node
              - way
              - relation
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Success
          content:
            application/xml:
              schema:
                type: array
                items:
                  oneOf:
                    - $ref: '#/components/schemas/Node'
                    - $ref: '#/components/schemas/Way'
                    - $ref: '#/components/schemas/Relation'
        '404': 
          description: When no element with the given id could be found
  
  /api/0.6/{elementType}/{id}/{version}:
    get:
      tags:
        - Elements
      summary: returns specific versions of an element.
      operationId: versionElement
      parameters:
        - name: elementType
          in: path
          description: Type of Osm core data element
          required: true
          schema:
            enum:
              - node
              - way
              - relation
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
        - name: version
          in: path
          required: true
          schema:
            type: integer
            format: int32
      responses:
        '200':
            description: Success
            content:
              application/xml:
                schema:
                  oneOf:
                    - $ref: '#/components/schemas/Node'
                    - $ref: '#/components/schemas/Way'
                    - $ref: '#/components/schemas/Relation'
        '404': 
          description: When no element with the given id could be found
  
  /api/0.6/{elementType}:
    get:
      tags:
        - Elements
      summary: returns specific versions of an element.
      operationId: multiVersionElement
      parameters:
        - name: elementType
          in: path
          description: Type of Osm core data element
          required: true
          schema:
            enum:
              - node
              - way
              - relation
        - name: node
          in: query
          description: format "{elementId}v{elementVersion}" in a comma separated list
          schema:
            type: string
        - name: way
          in: query
          description: same as in node
          schema:
            type: string
        - name: relation
          in: query
          description: same as in node
          schema:
            type: string
      responses:
        '200':
          description: Success
          content:
            application/xml:
              schema:
                type: array
                items:
                  oneOf:
                    - $ref: '#/components/schemas/Node'
                    - $ref: '#/components/schemas/Way'
                    - $ref: '#/components/schemas/Relation'
        '400':
          description: On a malformed request
        '404':
          description: If one of the elements could not be found (By "not found" is meant never existed in the database, if the object was deleted, it will be returned with the attribute visible="false")
        '412':
          description: If the URI was too long (tested to be > 8213 characters in the URI, or > 725 elements for 10 digit IDs when not specifying versions)
  
  /api/0.6/{elementType}/{id}/relations:
    get:
      tags:
        - Elements
      summary: Returns a XML document containing all (not deleted) relations in which the given element is used.
      description: >
        There is no error if the node does not exist.
        If the node does not exist or it isn't used in any ways an empty XML document is returned (apart from the <osm> elements)
      operationId: relationsOfElement
      parameters:
        - name: elementType
          in: path
          description: Type of Osm core data element
          required: true
          schema:
            enum:
              - node
              - way
              - relation
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Success
          content:
            application/xml:
              schema:
                type: array
                items:
                  oneOf:
                    - $ref: '#/components/schemas/Node'
                    - $ref: '#/components/schemas/Way'
                    - $ref: '#/components/schemas/Relation'
  
  /api/0.6/node/{}/ways:
    get:
      tags:
        - Elements
      summary: Returns a XML document containing all the (not deleted) ways in which the given node is used.
      operationId: waysElementRelations
      parameters:
        - name: elementType
          in: path
          description: Type of Osm core data element
          required: true
          schema:
            enum:
              - node
              - way
              - relation
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Success
          content:
            application/xml:
              schema:
                type: array
                items:
                  oneOf:
                    - $ref: '#/components/schemas/Node'
                    - $ref: '#/components/schemas/Way'
                    - $ref: '#/components/schemas/Relation'
  
  /api/0.6/{elementType}/{id}/full:
    get:
      tags:
        - Elements
      summary: This API call retrieves a way or relation and all other elements referenced by it
      operationId: fullElementRelations
      parameters:
        - name: elementType
          in: path
          description: Type of Osm core data element
          required: true
          schema:
            enum:
              - node
              - way
              - relation
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Success
          content:
            application/xml:
              schema:
                type: array
                items:
                  oneOf:
                    - $ref: '#/components/schemas/Node'
                    - $ref: '#/components/schemas/Way'
                    - $ref: '#/components/schemas/Relation'
        '404':
          description: When no element with the given id could be found
        '410':
          description: If the element has been deleted
  
  /api/0.6/trackpoints:
    get:
      tags:
        - GPS traces
      summary: get Trackpoints within bbox
      description: Use this to retrieve the GPS track points that are inside a given bounding box (formatted in a GPX format).
      operationId: getTrack
      parameters:
        - name: bbox
          in: query
          schema:
            type: array
            items:
              type: number
              format: double
            minItems: 4
            maxItems: 4
        - name: page
          in: query
          schema:
            type: number
            format: int32
      responses:
        '200':
          description: Success
          content:
            application/xml:
              schema:
                description: The file format is GPX Version 1.0 which is not the current version. Verify that your tools support it.
  
  /api/0.6/gpx/create:
    post:
      tags:
        - GPS traces
      summary: upload a GPX file
      operationId: createTrack
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  description: The GPX file containing the track points.
                description:
                  description: The trace description. Cannot be empty.
                tags:
                  description: A string containing tags for the trace. Can be empty.
                public:
                  deprecated: true
                  description: 1 if the trace is public, 0 if not.
                visibility:
                  type: string
                  enum:
                    - private
                    - public
                    - trackable
                    - identifiable
      responses:
        '200':
          description: Successful
          content:
            text/plain:
              schema:
                description: A number representing the ID of the new gpx
                type: number
                format: int64
        '400':
          description: When the description is empty
      security:
        - oAuth2:
          - write_api
        - basicAuth: []
  
  /api/0.6/gpx/{id}:
    put:
      tags:
        - GPS traces
      summary: update a GPX file
      operationId: updateTrack
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  description: The GPX file containing the track points.
                description:
                  description: The trace description. Cannot be empty.
                tags:
                  description: A string containing tags for the trace. Can be empty.
                public:
                  deprecated: true
                  description: 1 if the trace is public, 0 if not.
                visibility:
                  type: string
                  enum:
                    - private
                    - public
                    - trackable
                    - identifiable
      responses:
        '200':
          description: Successful
      security:
        - oAuth2:
          - write_api
        - basicAuth: []
    delete:
      tags:
        - GPS traces
      summary: delete a GPX file
      operationId: deleteTrack
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Successful
      security:
        - oAuth2:
          - write_api
        - basicAuth: []
  
  /api/0.6/gpx/{id}/details:
    get:
      tags:
        - GPS traces
      summary: metadata of a GPX file
      operationId: metaTrack
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: details of gpx
      security:
        - oAuth2:
          - write_api
        - basicAuth: []
  
  /api/0.6/gpx/{id}/data:
    get:
      tags:
        - GPS traces
      summary: download a GPX file
      operationId: downloadTrack
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: details of gpx
      security:
        - oAuth2:
          - write_api
        - basicAuth: []
  
  /api/0.6/user/gpx_files:
    get:
      tags:
        - GPS traces
      summary: each public tracks meta data
      operationId: metaUserTracks
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: details of gpx
      security:
        - oAuth2:
          - write_api
        - basicAuth: []
        



  /echo:
    post:
      summary: echo to see request and response version of an abject
      operationId: echo
      requestBody:
        content:
          application/xml:
            schema:
              $ref: '#/components/schemas/Relation'
      responses:
        '200':
          description: echo
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/Relation'


components:
  schemas:
    Osm:
      properties:
        version:
          type: string
          readOnly: true
          example: 0.6
          xml:
            attribute: true
        generator:
          type: string
          readOnly: true
          example: OpenStreetMap server
          xml:
            attribute: true
        copyright:
          type: string
          readOnly: true
          example: OpenStreetMap and contributors
          xml:
            attribute: true
        attribution:
          type: string
          readOnly: true
          example: https://www.openstreetmap.org/copyright
          xml:
            attribute: true
        license:
          type: string
          readOnly: true
          example: https://opendatacommons.org/licenses/odbl/1-0/
          xml:
            attribute: true
      xml:
        name: osm
    Changeset:
      properties:
        id:
          type: string
          example: 10
          readOnly: true
          xml:
            attribute: true
        user:
          type: string
          example: fred
          readOnly: true
          xml:
            attribute: true
        uid:
          type: string
          example: 123
          readOnly: true
          xml:
            attribute: true
        created_at:
          type: string
          format: date-time
          example: '2008-11-08T19:07:39+01:00'
          readOnly: true
          xml:
            attribute: true
        open:
          type: string
          enum:
            - 'true'
            - 'false'
          readOnly: true
          xml:
            attribute: true
        min_lon:
          type: number
          readOnly: true
          xml:
            attribute: true
        min_lat:
          type: number
          readOnly: true
          xml:
            attribute: true
        max_lon:
          type: number
          readOnly: true
          xml:
            attribute: true
        max_lat:
          type: number
          readOnly: true
          xml:
            attribute: true
        tag:
          type: array
          items:
            type: object
            properties:
              key: # TODO comment is required
                type: string
                example: comment
                xml:
                  name: k
                  attribute: true
              value:
                type: string
                example: Added some Trees
                xml:
                  name: v
                  attribute: true
            xml:
              wrapped: true
        discussion:
          type: object
          properties:
            comment:
              type: array
              items:
                type: object
                properties:
                  date:
                    type: string
                    format: date-time
                    example: '2015-01-01T18:56:48Z'
                    readOnly: true
                    xml:
                      attribute: true
                  uid:
                    type: string
                    example: 1841
                    readOnly: true
                    xml:
                      attribute: true
                  user:
                    type: string
                    example: metaodi
                    readOnly: true
                    xml:
                      attribute: true
                  text:
                    type: string
                    example: Did you verify those street names?
                xml:
                  wrapped: true
      xml:
        name: changeset
    Tag:
      properties:
        key:
          type: string
          description: key
          example: natural
          xml:
            name: k
            attribute: true
        value:
          type: string
          description: value
          example: tree
          xml:
            name: v
            attribute: true
      xml:
        name: tag
      required:
        - key
    Element:
      properties:
        id:
          type: string
          readOnly: false # need to be set for update
          description: id of that Node
          xml:
            attribute: true
        version:
          type: string
          readOnly: false # needs to be set for update
          description: longitude of Node
          xml:
            attribute: true
        changeset:
          type: string
          description: changeset id of your open changeset
          xml:
            attribute: true
        user:
          type: string
          readOnly: true
          description: longitude of Node
          xml:
            attribute: true
        userId:
          type: string
          readOnly: true
          description: longitude of Node
          xml:
            name: uid
            attribute: true
        visible:
          type: string
          enum:
            - true
            - false
          readOnly: false # can be set at update
          description: longitude of Node
          xml:
            attribute: true
        timestamp:
          type: string
          format: date-time
          readOnly: true
          description: last Modified
          xml:
            attribute: true
        tag:
          type: array
          items:
            $ref: '#/components/schemas/Tag'
    Node:
      allOf:
        - $ref: '#/components/schemas/Element'
        - type: object
          properties:
            lat:
              type: string
              description: latitude of Node
              xml:
                attribute: true
            lon:
              type: string
              description: longitude of Node
              xml:
                attribute: true
      required:
        - changeset
        - lat
        - lon
    Way:
      allOf:
        - $ref: '#/components/schemas/Element'
        - type: object
          properties:
            node:
              type: array
              minItems: 2
              maxItems: 2000
              items:
                type: object
                properties:
                  reference:
                    type: string
                    description: id of a node
                    xml:
                      name: ref
                      attribute: true
              xml:
                name: nd
      required:
        - changeset
        - node
    Relation:
      allOf:
        - $ref: '#/components/schemas/Element'
        - type: object
          properties:
            member:
              type: array
              minItems: 2 #not sure
              items:
                type: object
                properties:
                  type:
                    type: string
                    example: node
                    enum:
                      - node
                      - way
                      - relation
                    xml:
                      attribute: true
                  role:
                    type: string
                    description: <cite>A member of a relation can optionally have a role which describes the part that a particular feature plays within a relation</cite> <a href="https://wiki.openstreetmap.org/wiki/Relation#Roles"><sub>cite</sub></a>
                    xml:
                      attribute: true
                  reference:
                    type: string
                    description: id of a node
                    xml:
                      name: ref
                      attribute: true
          required:
            - member
            - type
            - reference

  securitySchemes:
    basicAuth:
      type: http
      scheme: basic
    oAuth2:
      type: oauth2
      description: For more information, see https://wiki.openstreetmap.org/wiki/OAuth#Registering_your_application_as_OAuth_2.0_consumer
      flows:
        authorizationCode:
          authorizationUrl: /oauth2/authorize
          tokenUrl: /oauth2/token
          scopes:
            read_prefs: read their user preferences
            write_prefs: modify their user preferences
            write_diary: create diary entries, comments and make friends
            write_api: modify the map
            read_gpx: read their private GPS traces
            write_gpx: upload GPS traces
            write_notes: modify notes
